name: Morpho Steakhouse Telegram

on:
  schedule:
    - cron: '0 6 * * *'   # 08:00 CEST
    - cron: '0 11 * * *'  # 13:00 CEST
    - cron: '0 16 * * *'  # 18:00 CEST
    - cron: '0 21 * * *'  # 23:00 CEST
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Check Morpho APY & Send Telegram
        run: |
          # Installa dipendenze necessarie: jq, bc e gawk
          sudo apt-get update && sudo apt-get install -y jq bc gawk

          echo "📡 Recupero dati dal vault Morpho Steakhouse USDT..."

          # GraphQL query per vaultByAddress
          QUERY=$(cat <<'GRAPHQL'
          {
            "query": "query { vaultByAddress(address: \"0xbEef047a543E45807105E51A8BBEFCc5950fcfba\", chainId: 1) { state { totalAssetsUsd apy netApy } } }"
          }
          GRAPHQL
          )

          # Richiesta API Morpho
          RESP=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "$QUERY" \
            https://api.morpho.org/graphql)

          echo "DEBUG: Risposta API: $RESP"

          # Estrazione dati con jq (con gestione null)
          TVL=$(echo "$RESP" | jq -r '.data.vaultByAddress.state.totalAssetsUsd // "null"')
          APY=$(echo "$RESP" | jq -r '.data.vaultByAddress.state.apy // "null"')
          NET_APY=$(echo "$RESP" | jq -r '.data.vaultByAddress.state.netApy // "null"')

          echo "DEBUG: TVL estratto: $TVL"
          echo "DEBUG: APY estratto: $APY"
          echo "DEBUG: NET_APY estratto: $NET_APY"

          # Controllo se i dati sono validi
          if [[ -z "$TVL" || "$TVL" == "null" || -z "$APY" || "$APY" == "null" || -z "$NET_APY" || "$NET_APY" == "null" ]]; then
            MSG="❌ ERRORE: impossibile recuperare i dati dal vault Morpho. Controlla l'API o la query."
          else
            # Conversione dei valori (usa bc per floating point)
            TVL_M=$(echo "scale=2; $TVL / 1000000" | bc | awk '{printf "%.2f", $0}')
            APY_PERC=$(echo "scale=2; $APY * 100" | bc | awk '{printf "%.2f", $0}')
            NET_APY_PERC=$(echo "scale=2; $NET_APY * 100" | bc | awk '{printf "%.2f", $0}')

            # Messaggio base
            MSG="📊 Morpho – Steakhouse USDT\nTVL: ${TVL_M} M USD\nAPY lordo: ${APY_PERC}%\nAPY netto: ${NET_APY_PERC}%"

            # Soglie per alert rischio alto (es. possibile hack)
            TVL_THRESHOLD=20000000  # 20M USD
            NET_APY_THRESHOLD=0.04  # 4% (come decimale)

            ALERT=""
            if (( $(echo "$TVL < $TVL_THRESHOLD" | bc -l) )); then
              ALERT+="⚠️ **ALERT TVL**: Calo sotto 20M USD (possibile rischio alto, es. hack o exodus)!\n"
            fi
            if (( $(echo "$NET_APY < $NET_APY_THRESHOLD" | bc -l) )); then
              ALERT+="⚠️ **ALERT APY**: Net APY sotto 4% (possibile instabilità o problema nel vault)!\n"
            fi

            # Aggiungi status "Tutto OK" o "Rischio Alto" basato su alert
            if [[ ! -z "$ALERT" ]]; then
              MSG="${MSG}\n\n${ALERT}❌ **Stato: Rischio Alto** 🚨\n**Azione consigliata**: Indaga su Morpho/Discord e considera withdraw."
            else
              MSG="${MSG}\n\n✅ **Stato: Tutto OK**"
            fi
          fi

          echo "DEBUG: Messaggio finale: $MSG"

          # Invio messaggio a Telegram (con escaping per text)
          curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.CHAT_ID }}" \
            -d text="${MSG}" \
            -d parse_mode="Markdown"
